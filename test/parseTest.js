const chai = require('chai');
const chaiAsPromised = require("chai-as-promised");
const fs = require('fs');
const path = require("path");
const parser = require('../lib');
const { ParserError } = require('../lib/errors');

chai.use(chaiAsPromised);
const expect = chai.expect;

const invalidYAML = fs.readFileSync(path.resolve(__dirname, "./malformed-asyncapi.yaml"), 'utf8');
const inputYAML = fs.readFileSync(path.resolve(__dirname, "./asyncapi.yaml"), 'utf8');
const outputJSON = '{"asyncapi":"2.0.0-rc1","id":"urn:myapi","info":{"title":"My API","version":"1.0.0"},"channels":{"mychannel":{"publish":{"externalDocs":{"x-extension":true,"url":"https://company.com/docs"},"message":{"payload":{"type":"object","properties":{"name":{"type":"string"},"test":{"type":"object","properties":{"testing":{"type":"string"}}}}},"x-some-extension":"some extension","x-parser-original-traits":[{"x-some-extension":"some extension"}]},"x-parser-original-traits":[{"externalDocs":{"url":"https://company.com/docs"}}]}}},"components":{"messages":{"testMessage":{"payload":{"type":"object","properties":{"name":{"type":"string"},"test":{"type":"object","properties":{"testing":{"type":"string"}}}}},"x-some-extension":"some extension","x-parser-original-traits":[{"x-some-extension":"some extension"}]}},"schemas":{"testSchema":{"type":"object","properties":{"name":{"type":"string"},"test":{"type":"object","properties":{"testing":{"type":"string"}}}}}},"traits":{"no-params":{"x-some-extension":"some extension"},"docs":{"externalDocs":{"url":"https://company.com/docs"}}}}}';
const inputWithOpenAPI = fs.readFileSync(path.resolve(__dirname, "./asyncapi-openapi.yaml"), 'utf8');
const outputWithOpenAPI = '{"asyncapi":"2.0.0-rc1","id":"urn:myapi","info":{"title":"My API","version":"1.0.0"},"channels":{"mychannel":{"publish":{"message":{"payload":{"type":["object","null"],"properties":{"name":{"type":"string"},"discriminatorTest":{"oneOf":[{"type":"object","properties":{"objectType":{"type":"string"},"prop1":{"type":"string"}}},{"type":"object","properties":{"objectType":{"type":"string"},"prop2":{"type":"string"}}}],"x-discriminator":"objectType"},"test":{"type":"object","properties":{"testing":{"type":"string"}}}},"examples":[{"name":"Fran"}]},"x-parser-original-schema-format":"application/vnd.oai.openapi","x-parser-original-schema":{"type":"object","nullable":true,"example":{"name":"Fran"},"properties":{"name":{"type":"string"},"discriminatorTest":{"discriminator":"objectType","oneOf":[{"type":"object","properties":{"objectType":{"type":"string"},"prop1":{"type":"string"}}},{"type":"object","properties":{"objectType":{"type":"string"},"prop2":{"type":"string"}}}]},"test":{"type":"object","properties":{"testing":{"type":"string"}}}}}}}}},"components":{"messages":{"testMessage":{"payload":{"type":["object","null"],"properties":{"name":{"type":"string"},"discriminatorTest":{"oneOf":[{"type":"object","properties":{"objectType":{"type":"string"},"prop1":{"type":"string"}}},{"type":"object","properties":{"objectType":{"type":"string"},"prop2":{"type":"string"}}}],"x-discriminator":"objectType"},"test":{"type":"object","properties":{"testing":{"type":"string"}}}},"examples":[{"name":"Fran"}]},"x-parser-original-schema-format":"application/vnd.oai.openapi","x-parser-original-schema":{"type":"object","nullable":true,"example":{"name":"Fran"},"properties":{"name":{"type":"string"},"discriminatorTest":{"discriminator":"objectType","oneOf":[{"type":"object","properties":{"objectType":{"type":"string"},"prop1":{"type":"string"}}},{"type":"object","properties":{"objectType":{"type":"string"},"prop2":{"type":"string"}}}]},"test":{"type":"object","properties":{"testing":{"type":"string"}}}}}}},"schemas":{"testSchema":{"type":"object","nullable":true,"example":{"name":"Fran"},"properties":{"name":{"type":"string"},"discriminatorTest":{"discriminator":"objectType","oneOf":[{"type":"object","properties":{"objectType":{"type":"string"},"prop1":{"type":"string"}}},{"type":"object","properties":{"objectType":{"type":"string"},"prop2":{"type":"string"}}}]},"test":{"type":"object","properties":{"testing":{"type":"string"}}}}}}}}';
const inputWithRAML = fs.readFileSync(path.resolve(__dirname, "./asyncapi-raml.yaml"), 'utf8');
const outputWithRAML = '{"asyncapi":"2.0.0-rc1","id":"apis:async:checkouts","info":{"title":"Checkouts Async API","version":"1.0"},"servers":[{"url":"demo.ecommerce.com/checkouts","protocol":"ws"}],"channels":{"/checkouts/{checkoutId}/shipping_rates":{"subscribe":{"message":{"payload":{"x-data_model.model":"ShippingRate","x-data_model.mode":"read-write","required":["handle","price","title"],"properties":{"handle":{"type":"string"},"price":{"type":"string"},"title":{"type":"string"}},"type":"object"},"x-parser-original-schema-format":"application/raml+yaml","x-parser-original-schema":{"(data_model.model)":"ShippingRate","(data_model.mode)":"read-write","properties":{"handle":"string","price":"string","title":"string"}}}}}}}';
const streetlightsOutput = '{"asyncapi":"2.0.0-rc1","id":"urn:com:smartylighting:streetlights:server","info":{"title":"Streetlights API","version":"1.0.0","description":"The Smartylighting Streetlights API allows you to remotely manage the city lights.\\n\\n### Check out its awesome features:\\n\\n* Turn a specific streetlight on/off ðŸŒƒ\\n* Dim a specific streetlight ðŸ˜Ž\\n* Receive real-time information about environmental lighting conditions ðŸ“ˆ\\n","license":{"name":"Apache 2.0","url":"https://www.apache.org/licenses/LICENSE-2.0"}},"servers":[{"url":"api.streetlights.smartylighting.com:{port}","protocol":"mqtt","description":"Test broker","baseChannel":"smartylighting/streetlights/1/0","variables":{"port":{"description":"Secure connection (TLS) is available through port 8883.","default":"1883","enum":["1883","8883"]}},"security":[{"apiKey":[]},{"supportedOauthFlows":["streetlights:on","streetlights:off","streetlights:dim"]},{"openIdConnectWellKnown":[]}]}],"defaultContentType":"application/json","channels":{"event/{streetlightId}/lighting/measured":{"description":"The topic on which measured values may be produced and consumed.","parameters":[{"name":"streetlightId","description":"The ID of the streetlight.","schema":{"type":"string"}}],"subscribe":{"summary":"Receive information about environmental lighting conditions of a particular streetlight.","operationId":"receiveLightMeasurement","message":{"name":"lightMeasured","title":"Light measured","summary":"Inform about environmental lighting conditions for a particular streetlight.","contentType":"application/json","payload":{"type":"object","properties":{"lumens":{"type":"integer","minimum":0,"description":"Light intensity measured in lumens."},"sentAt":{"type":"string","format":"date-time","description":"Date and time when the message was sent."}}},"externalDocs":{"url":"https://company.com/docs#message-light-measured"},"x-parser-original-traits":[[{"externalDocs":{"url":"https://company.com/docs"}},{"headerId":"message-light-measured"}]]},"externalDocs":{"url":"https://company.com/docs#lighting-measured"},"x-parser-original-traits":[[{"externalDocs":{"url":"https://company.com/docs"}},{"headerId":"lighting-measured"}]]}},"action/{streetlightId}/turn/on":{"parameters":[{"name":"streetlightId","description":"The ID of the streetlight.","schema":{"type":"string"}}],"publish":{"operationId":"turnOn","message":{"name":"turnOnOff","title":"Turn on/off","summary":"Command a particular streetlight to turn the lights on or off.","payload":{"type":"object","properties":{"command":{"type":"string","enum":["on","off"],"description":"Whether to turn on or off the light."},"sentAt":{"type":"string","format":"date-time","description":"Date and time when the message was sent."}}},"externalDocs":{"url":"https://company.com/docs#message-turn-on-off"},"x-parser-original-traits":[[{"externalDocs":{"url":"https://company.com/docs"}},{"headerId":"message-turn-on-off"}]]},"externalDocs":{"url":"https://company.com/docs#turn-on"},"x-parser-original-traits":[[{"externalDocs":{"url":"https://company.com/docs"}},{"headerId":"turn-on"}]]}},"action/{streetlightId}/turn/off":{"parameters":[{"name":"streetlightId","description":"The ID of the streetlight.","schema":{"type":"string"}}],"publish":{"operationId":"turnOff","message":{"name":"turnOnOff","title":"Turn on/off","summary":"Command a particular streetlight to turn the lights on or off.","payload":{"type":"object","properties":{"command":{"type":"string","enum":["on","off"],"description":"Whether to turn on or off the light."},"sentAt":{"type":"string","format":"date-time","description":"Date and time when the message was sent."}}},"externalDocs":{"url":"https://company.com/docs#message-turn-on-off"},"x-parser-original-traits":[[{"externalDocs":{"url":"https://company.com/docs"}},{"headerId":"message-turn-on-off"}]]},"externalDocs":{"url":"https://company.com/docs#turn-off"},"x-parser-original-traits":[[{"externalDocs":{"url":"https://company.com/docs"}},{"headerId":"turn-off"}]]}},"action/{streetlightId}/dim":{"parameters":[{"name":"streetlightId","description":"The ID of the streetlight.","schema":{"type":"string"}}],"publish":{"operationId":"dimLight","message":{"name":"dimLight","title":"Dim light","summary":"Command a particular streetlight to dim the lights.","payload":{"type":"object","properties":{"percentage":{"type":"integer","description":"Percentage to which the light should be dimmed to.","minimum":0,"maximum":100},"sentAt":{"type":"string","format":"date-time","description":"Date and time when the message was sent."}}},"externalDocs":{"url":"https://company.com/docs#message-dim-light"},"x-parser-original-traits":[[{"externalDocs":{"url":"https://company.com/docs"}},{"headerId":"message-dim-light"}]]},"externalDocs":{"url":"https://company.com/docs#dim"},"x-parser-original-traits":[[{"externalDocs":{"url":"https://company.com/docs"}},{"headerId":"dim"}]]}}},"components":{"messages":{"lightMeasured":{"name":"lightMeasured","title":"Light measured","summary":"Inform about environmental lighting conditions for a particular streetlight.","contentType":"application/json","payload":{"type":"object","properties":{"lumens":{"type":"integer","minimum":0,"description":"Light intensity measured in lumens."},"sentAt":{"type":"string","format":"date-time","description":"Date and time when the message was sent."}}},"externalDocs":{"url":"https://company.com/docs#message-light-measured"},"x-parser-original-traits":[[{"externalDocs":{"url":"https://company.com/docs"}},{"headerId":"message-light-measured"}]]},"turnOnOff":{"name":"turnOnOff","title":"Turn on/off","summary":"Command a particular streetlight to turn the lights on or off.","payload":{"type":"object","properties":{"command":{"type":"string","enum":["on","off"],"description":"Whether to turn on or off the light."},"sentAt":{"type":"string","format":"date-time","description":"Date and time when the message was sent."}}},"externalDocs":{"url":"https://company.com/docs#message-turn-on-off"},"x-parser-original-traits":[[{"externalDocs":{"url":"https://company.com/docs"}},{"headerId":"message-turn-on-off"}]]},"dimLight":{"name":"dimLight","title":"Dim light","summary":"Command a particular streetlight to dim the lights.","payload":{"type":"object","properties":{"percentage":{"type":"integer","description":"Percentage to which the light should be dimmed to.","minimum":0,"maximum":100},"sentAt":{"type":"string","format":"date-time","description":"Date and time when the message was sent."}}},"externalDocs":{"url":"https://company.com/docs#message-dim-light"},"x-parser-original-traits":[[{"externalDocs":{"url":"https://company.com/docs"}},{"headerId":"message-dim-light"}]]}},"schemas":{"lightMeasuredPayload":{"type":"object","properties":{"lumens":{"type":"integer","minimum":0,"description":"Light intensity measured in lumens."},"sentAt":{"type":"string","format":"date-time","description":"Date and time when the message was sent."}}},"turnOnOffPayload":{"type":"object","properties":{"command":{"type":"string","enum":["on","off"],"description":"Whether to turn on or off the light."},"sentAt":{"type":"string","format":"date-time","description":"Date and time when the message was sent."}}},"dimLightPayload":{"type":"object","properties":{"percentage":{"type":"integer","description":"Percentage to which the light should be dimmed to.","minimum":0,"maximum":100},"sentAt":{"type":"string","format":"date-time","description":"Date and time when the message was sent."}}},"sentAt":{"type":"string","format":"date-time","description":"Date and time when the message was sent."}},"securitySchemes":{"apiKey":{"type":"apiKey","in":"user","description":"Provide your API key as the user and leave the password empty."},"supportedOauthFlows":{"type":"oauth2","description":"Flows to support OAuth 2.0","flows":{"implicit":{"authorizationUrl":"https://authserver.example/auth","scopes":{"streetlights:on":"Ability to switch lights on","streetlights:off":"Ability to switch lights off","streetlights:dim":"Ability to dim the lights"}},"password":{"tokenUrl":"https://authserver.example/token","scopes":{"streetlights:on":"Ability to switch lights on","streetlights:off":"Ability to switch lights off","streetlights:dim":"Ability to dim the lights"}},"clientCredentials":{"tokenUrl":"https://authserver.example/token","scopes":{"streetlights:on":"Ability to switch lights on","streetlights:off":"Ability to switch lights off","streetlights:dim":"Ability to dim the lights"}},"authorizationCode":{"authorizationUrl":"https://authserver.example/auth","tokenUrl":"https://authserver.example/token","refreshUrl":"https://authserver.example/refresh","scopes":{"streetlights:on":"Ability to switch lights on","streetlights:off":"Ability to switch lights off","streetlights:dim":"Ability to dim the lights"}}}},"openIdConnectWellKnown":{"type":"openIdConnect","openIdConnectUrl":"https://authserver.example/.well-known"}},"parameters":{"streetlightId":{"name":"streetlightId","description":"The ID of the streetlight.","schema":{"type":"string"}}},"traits":{"docs":{"externalDocs":{"url":"https://company.com/docs"}}}}}';

describe('parse()', function () {
  it('should parse YAML', async function () {
    const result = await parser.parse(inputYAML, { path: __filename });
    await expect(JSON.stringify(result)).to.equal(outputJSON);
  });
  
  it('should throw error if document is invalid YAML', async function () {
    const testFn = async () => await parser.parse(invalidYAML, { path: __filename });
    await expect(testFn())
      .to.be.rejectedWith(ParserError)
  });

  it('should throw error if document is empty', async function () {
    const testFn = async () => await parser.parse('');
    await expect(testFn())
      .to.be.rejectedWith(ParserError)
  });

  it('should parse OpenAPI schemas', async function () {
    const result = await parser.parse(inputWithOpenAPI, { path: __filename });
    await expect(JSON.stringify(result)).to.equal(outputWithOpenAPI);
  });
});

// describe('parseFromUrl()', function () {
//   it('should fetch document and parse it', async function () {
//     const result = await parser.parseFromUrl('http://localhost:5000/streetlights.yml', {}, { path: __filename });
//     await expect(JSON.stringify(result)).to.equal(streetlightsOutput);
//   });
// });